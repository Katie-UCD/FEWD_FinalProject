<div class="container-fluid tarotSection">
    <div class="container">
        <h3>Tarot Reading</h3>
        <div class="row">
            <div class="col col-lg-2 buttons">
                <button type="button" class="tarotBtn" id="todayBtn">Today's Card</button>
            </div>
            <div class="col col-lg-3">
                <button type="button" class="tarotBtn" id="threeBtn">Three Card Reading</button>
            </div>
        </div>
    </div>
    
     <div class="container">    
     
         <div class="row justify-content-md-center">
            <div id="tarotResults"></div>
         </div>
    </div>      
</div>	




<script>  
interface TarotCard {
    Img: string;
    Name: string;
    Description: string;
    Reversed: boolean | string;
}

fetch('https://raw.githubusercontent.com/Katie-UCD/dailyDivination/refs/heads/main/db.json')
  .then(response => response.json())
  .then((data: { tarot: TarotCard[] }) => { 
    const todayBtn = document.getElementById('todayBtn')as HTMLButtonElement | null;
    const threeBtn = document.getElementById('threeBtn')as HTMLButtonElement | null;
    const tarotResults = document.getElementById('tarotResults') as HTMLDivElement | null;

    if (!todayBtn || !threeBtn || !tarotResults) {
        console.error("Missing necessary elements.");
        return;
    }

    function displaySingleCard(card: TarotCard) {
     if (todayBtn && tarotResults) {    
        tarotResults.innerHTML = '';  

        const rowDiv = document.createElement('div');
        rowDiv.classList.add('row', 'justify-content-center');

        const colDiv = document.createElement('div');
        colDiv.classList.add('col-md-4', 'text-center', 'card-wrapper');

        const cardImage = document.createElement('img');
        cardImage.src = card.Img;
        cardImage.alt = card.Name;
        cardImage.classList.add('img-fluid', 'tarot-card');

        if (card.Reversed === true || card.Reversed === "true") {
            cardImage.style.transform = 'rotate(180deg)';
            cardImage.style.transition = 'transform 1s ease-in-out';
        }

        const dateDisplay = document.createElement('h6');
        dateDisplay.textContent = new Date().toLocaleDateString("en-GB", {
            day: "numeric",
            month: "long",
            year: "numeric"
        });

        const cardName = document.createElement('h5');
        cardName.textContent = card.Name;

        const cardDescription = document.createElement('p');
        cardDescription.textContent = card.Description;

        colDiv.appendChild(cardImage);
        colDiv.appendChild(dateDisplay);
        colDiv.appendChild(cardName);
        colDiv.appendChild(cardDescription);
        rowDiv.appendChild(colDiv);
        tarotResults.appendChild(rowDiv); // Append only once!
        }
    };

    function displayThreeCards() {
     if (threeBtn && tarotResults) {     
        tarotResults.innerHTML = ''; 

        const rowDiv = document.createElement('div');
        rowDiv.classList.add('row', 'justify-content-center');

        for (let i = 0; i < 3; i++) {
            const randomIndex = Math.floor(Math.random() * data.tarot.length);
            const randomCard = data.tarot[randomIndex];

            const cardCol = document.createElement('div');
            cardCol.classList.add('col-md-4', 'text-center', 'card-wrapper');

            const cardImage = document.createElement('img');
            cardImage.src = randomCard.Img;
            cardImage.alt = randomCard.Name;
            cardImage.classList.add('img-fluid', 'tarot-card');

            if (randomCard.Reversed === true || randomCard.Reversed === "true") {
                cardImage.style.transform = 'rotate(180deg)';
                cardImage.style.transition = 'transform 1s ease-in-out';
            }

            const cardName = document.createElement('h5');
            cardName.textContent = randomCard.Name;

            const cardDescription = document.createElement('p');
            cardDescription.textContent = randomCard.Description;

            cardCol.appendChild(cardImage);
            cardCol.appendChild(cardName);
            cardCol.appendChild(cardDescription);
            rowDiv.appendChild(cardCol);
        }

        tarotResults.appendChild(rowDiv);
    }};

    todayBtn.addEventListener('click', () => {
        const randomIndex = Math.floor(Math.random() * data.tarot.length);
        const randomCard = data.tarot[randomIndex];
        displaySingleCard(randomCard);
    });

    threeBtn.addEventListener('click', displayThreeCards);
});


</script>

<style>
.tarot-card {
    max-width: 100%;
    height: auto;
    max-height: 250px;
}

.card-wrapper {
    max-width: 300px;
    margin-bottom: 20px;
}

.tarotSection{
    padding: 10px;
}
 
.buttons{
    margin-bottom: 50px;
}
    </style>
    



